
Useful Github instructions:

	https://help.github.com/articles/fork-a-repo/
	https://help.github.com/articles/creating-and-deleting-branches-within-your-repository/
	https://help.github.com/articles/syncing-a-fork/
	https://help.github.com/articles/pushing-to-a-remote/
	https://help.github.com/articles/using-pull-requests/

I’m having modest success with modeling the typical workflow:

1) fork the “upstream” repository
2) clone the fork to local machine
3) create a branch, make modifications on a branch, commit and push to my fork
4) make a pull request to the  “upstream”
5) merge my branch into the upstream/master.

To close the loop and update everything from upstream: 

1)	git fetch upstream			Fetch all changes form “upstream”  
						where upstream is defined to be https://github.com/BradyMetals/scrap-runner

2)	git checkout master			Change to local master branch

3)	git merge upstream/master		Merge the (previously fetched) changes from upstream/master into local master.		
						My master is now up to date with https://github.com/BradyMetals/scrap-runner

4)	git checkout development		Change to my development branch

5)	git merge master			Merge my master into my working branch

Generally I should have the latest from https://github.com/BradyMetals/scrap-runner
plus and commits (like outstanding pull requests) that haven’t yet made it all the way through.

6)	git status
  	git push				Push to forked repository
	git checkout master
  	git push				Push to forked repository
