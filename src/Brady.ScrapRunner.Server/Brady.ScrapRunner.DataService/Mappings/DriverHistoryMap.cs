using Brady.ScrapRunner.Domain.Models;
using NHibernate.Mapping.ByCode;
using NHibernate.Mapping.ByCode.Conformist;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Brady.ScrapRunner.DataService.Mappings
{
    public class DriverHistoryMap : ClassMapping<DriverHistory>
    {
        public DriverHistoryMap()
        {
            Table("DriverHistory");

            Property(x => x.Id, m =>
            {
                m.Formula("concat(EmployeeId, ';', TripNumber, ';', DriverSeqNumber)");
                m.Insert(false);
                m.Update(false);
            });

            ComposedId(map =>
            {
                map.Property(y => y.EmployeeId, m => m.Generated(PropertyGeneration.Never));
                map.Property(y => y.TripNumber, m => m.Generated(PropertyGeneration.Never));
                map.Property(y => y.DriverSeqNumber, m => m.Generated(PropertyGeneration.Never));
            });

            Property(x => x.TripSegNumber);
            Property(x => x.TripSegType);
            Property(x => x.TripSegTypeDesc);
            Property(x => x.TripAssignStatus);
            Property(x => x.TripAssignStatusDesc);
            Property(x => x.TripStatus);
            Property(x => x.TripStatusDesc);
            Property(x => x.TripSegStatus);
            Property(x => x.TripSegStatusDesc);
            Property(x => x.DriverStatus);
            Property(x => x.DriverStatusDesc);
            Property(x => x.DriverName);
            Property(x => x.TerminalId);
            Property(x => x.TerminalName);
            Property(x => x.RegionId);
            Property(x => x.RegionName);
            Property(x => x.PowerId);
            Property(x => x.DriverArea);
            Property(x => x.MDTId);
            Property(x => x.LoginDateTime);
            Property(x => x.ActionDateTime);
            Property(x => x.DriverCumMinutes);
            Property(x => x.Odometer);
            Property(x => x.DestCustType);
            Property(x => x.DestCustTypeDesc);
            Property(x => x.DestCustHostCode);
            Property(x => x.DestCustName);
            Property(x => x.DestCustAddress1);
            Property(x => x.DestCustAddress2);
            Property(x => x.DestCustCity);
            Property(x => x.DestCustState);
            Property(x => x.DestCustZip);
            Property(x => x.DestCustCountry);
            Property(x => x.GPSAutoGeneratedFlag);
            Property(x => x.GPSXmitFlag);
            Property(x => x.MdtVersion);
        }
    }
}