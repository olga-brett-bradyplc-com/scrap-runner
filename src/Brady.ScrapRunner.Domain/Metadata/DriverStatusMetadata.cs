using System;
using Brady.ScrapRunner.Domain.Models;
using BWF.DataServices.Metadata.Fluent.Abstract;

namespace Brady.ScrapRunner.Domain.Metadata
{
    public class DriverStatusMetadata : TypeMetadataProvider<DriverStatus>
    {
        public DriverStatusMetadata()
        {

            AutoUpdatesByDefault();
            
            StringProperty(x => x.Id)
                .IsHiddenInEditor()
                .IsNotEditableInGrid();

            StringProperty(x => x.EmployeeId)
                .IsId()
                .DisplayName("Employee Id");

            StringProperty(x => x.TripNumber);
            StringProperty(x => x. TripSegNumber);
            StringProperty(x => x. TripSegType);
            StringProperty(x => x. TripAssignStatus);
            StringProperty(x => x.TripStatus);
            StringProperty(x => x.TripSegStatus);
            // Known as DriverStatus in the scraprunner database.
            StringProperty(x => x.Status).DisplayName("DriverStatus");
            StringProperty(x => x.TerminalId);
            StringProperty(x => x.RegionId);
            StringProperty(x => x.PowerId);
            StringProperty(x => x.DriverArea);
            StringProperty(x => x.MDTId);
            TimeProperty(x => x.LoginDateTime);
            TimeProperty(x => x.ActionDateTime);
            IntegerProperty(x => x.DriverCumMinutes);
            IntegerProperty(x => x.Odometer);
            StringProperty(x => x.RFIDFlag);
            StringProperty(x => x.RouteTo);
            TimeProperty(x => x.LoginProcessedDateTime);
            StringProperty(x => x.GPSAutoGeneratedFlag);
            TimeProperty(x => x.ContainerMasterDateTime);
            StringProperty(x => x.DelayCode);
            StringProperty(x => x.PrevDriverStatus);
            StringProperty(x => x.MdtVersion);
            StringProperty(x => x.GPSXmitFlag);
            IntegerProperty(x => x.SendHHLogoffFlag);
            TimeProperty(x => x.TerminalMasterDateTime);
            IntegerProperty(x => x.DriverLCID);
            StringProperty(x => x.ServicesFlag);

        ViewDefaults()
            .Property(x => x.EmployeeId)
            .Property(x => x.TripNumber)
            .Property(x => x.TripSegNumber)
            .Property(x => x.TripSegType)
            .Property(x => x.TripAssignStatus)
            .Property(x => x.TripStatus)
            .Property(x => x.TripSegStatus)
            // Known as DriverStatus in the scraprunner database.
            .Property(x => x.Status)
            .Property(x => x.TerminalId)
            .Property(x => x.RegionId)
            .Property(x => x.PowerId)
            .Property(x => x.DriverArea)
            .Property(x => x.MDTId)
            .Property(x => x.LoginDateTime)
            .Property(x => x.ActionDateTime)
            .Property(x => x.DriverCumMinutes)
            .Property(x => x.Odometer)
            .Property(x => x.RFIDFlag)
            .Property(x => x.RouteTo)
            .Property(x => x.LoginProcessedDateTime)
            .Property(x => x.GPSAutoGeneratedFlag)
            .Property(x => x.ContainerMasterDateTime)
            .Property(x => x.DelayCode)
            .Property(x => x.PrevDriverStatus)
            .Property(x => x.MdtVersion)
            .Property(x => x.GPSXmitFlag)
            .Property(x => x.SendHHLogoffFlag)
            .Property(x => x.TerminalMasterDateTime)
            .Property(x => x.DriverLCID)
            .Property(x => x.ServicesFlag)
            .OrderBy(x => x.EmployeeId);
        }
    }
}
